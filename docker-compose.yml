services:
  # MinIO for local testing
  minio:
    image: quay.io/minio/minio:latest
    container_name: minio
    restart: unless-stopped
    ports:
      - "9000:9000" # API port
      - "9001:9001" # Web console port
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_PROMETHEUS_AUTH_TYPE: "public"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      - boilstream-network

  # Create default buckets on startup
  minio-setup:
    image: quay.io/minio/mc:latest
    container_name: minio-setup
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      /usr/bin/mc config host add minio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb --ignore-existing minio/test-bucket;
      /usr/bin/mc mb --ignore-existing minio/ingestion-data;
      /usr/bin/mc anonymous set download minio/test-bucket;
      exit 0;
      "
    networks:
      - boilstream-network

  # Valkey is a Redis-compatible in-memory data store for metadata and caching
  valkey:
    image: valkey/valkey:latest
    container_name: valkey
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: valkey-server /etc/valkey/valkey.conf --appendonly yes
    volumes:
      - valkey_data:/data
      - ./config/valkey.conf:/etc/valkey/valkey.conf:ro
    healthcheck:
      test: ["CMD", "valkey-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
    networks:
      - boilstream-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"
      - "--storage.tsdb.min-block-duration=2h"
      - "--storage.tsdb.max-block-duration=2h"
      - "--query.lookback-delta=1s"
      - "--storage.tsdb.retention.time=7d" # 7 days retention for free tier
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - boilstream-network
    # Add extra hosts to resolve host.docker.internal on all platforms
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # Grafana for visualization and monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_DASHBOARDS_MIN_REFRESH_INTERVAL=1s
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_INSTALL_PLUGINS=
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - boilstream-network
    # Add extra hosts to resolve host.docker.internal on all platforms
    extra_hosts:
      - "host.docker.internal:host-gateway"

volumes:
  minio_data:
    driver: local
  valkey_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  boilstream-network:
    driver: bridge
